import os
import pandas as pd
import time
import json
import re
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from flask import Flask, request, jsonify, Response, stream_with_context
from flask_cors import CORS
import google.generativeai as genai
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Initialize Flask app
app = Flask(__name__)
# Enable Cross-Origin Resource Sharing
CORS(app)

# --- State Management ---
app_state = {
    "contacts_df": None,
    "headers": []
}

# --- Email Configuration ---
SENDER_EMAIL = os.getenv("EMAIL_ADDRESS")
SENDER_PASSWORD = os.getenv("EMAIL_PASSWORD")

# --- Google Gemini Configuration ---
try:
    gemini_api_key = os.getenv("GEMINI_API_KEY")
    if not gemini_api_key:
        raise ValueError("GEMINI_API_KEY not found in environment variables.")
    genai.configure(api_key=gemini_api_key)
    model = genai.GenerativeModel('gemini-1.5-flash')
    print("‚úÖ Gemini AI Model configured successfully!")
except Exception as e:
    print(f"‚ùå Error configuring Gemini AI: {e}")
    model = None

# --- Helper Function to Send Email ---
def send_email(receiver_email, subject, body):
    if not SENDER_EMAIL or not SENDER_PASSWORD:
        print("‚ùå Email credentials (EMAIL_ADDRESS, EMAIL_PASSWORD) not found in .env file. Skipping email.")
        return False, "Email credentials not configured in .env file."

    message = MIMEMultipart("alternative")
    message["Subject"] = subject
    message["From"] = SENDER_EMAIL
    message["To"] = receiver_email

    # Attach the body to the email
    message.attach(MIMEText(body, "plain"))

    try:
        # Create a secure SSL context
        context = ssl.create_default_context()
        print(f"üì¨ Connecting to Gmail SMTP server to send email to {receiver_email}...")
        with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.sendmail(SENDER_EMAIL, receiver_email, message.as_string())
        print(f"‚úÖ Email sent successfully to {receiver_email}!")
        return True, "Email sent successfully."
    except Exception as e:
        print(f"‚ùå Failed to send email to {receiver_email}. Error: {e}")
        return False, str(e)


# --- API Routes ---
@app.route('/api/process-sheet', methods=['POST'])
def process_sheet():
    df = None
    source_name = ""
    try:
        if request.is_json:
            data = request.get_json()
            if not data or 'url' not in data:
                return jsonify({"error": "Request body must contain a 'url' key."}), 400
            url = data['url']
            source_name = "Google Sheet"
            match = re.search(r'/spreadsheets/d/([a-zA-Z0-9-_]+)', url)
            sheet_id = match.group(1)
            gid_match = re.search(r'gid=([0-9]+)', url)
            gid = gid_match.group(1) if gid_match else '0'
            csv_export_url = f'https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid={gid}'
            df = pd.read_csv(csv_export_url, header=None, keep_default_na=False)
            df.columns = df.iloc[0]
            df = df.iloc[1:].reset_index(drop=True)

        elif 'sheet' in request.files and request.files['sheet'].filename:
            file = request.files['sheet']
            source_name = file.filename
            df = pd.read_csv(file, header=None, keep_default_na=False)
            df.columns = df.iloc[0]
            df = df.iloc[1:].reset_index(drop=True)
        else:
            return jsonify({"error": "Invalid request."}), 400

        df.columns = df.columns.str.strip().str.lower()
        if 'email' not in df.columns:
            return jsonify({"error": "Data must contain an 'email' column."}), 400
        
        df.dropna(subset=['email'], inplace=True)
        df = df.astype(str)
        app_state["contacts_df"] = df
        app_state["headers"] = list(df.columns)
        
        return jsonify({
            "message": f"‚úÖ Successfully processed {source_name}. Found {len(df)} contacts.",
            "headers": app_state["headers"]
        })
    except Exception as e:
        return jsonify({"error": f"Failed to process source: {e}"}), 500


@app.route('/api/run-automation', methods=['GET'])
def run_automation():
    prompt_template = request.args.get('prompt', '')
    
    if not model:
        def error_stream():
            yield f"data: ‚ùå Gemini AI Model is not configured.\n\n"
            yield f"data: ___END___\n\n"
        return Response(error_stream(), mimetype='text/event-stream')

    if app_state["contacts_df"] is None:
        def error_stream():
            yield f"data: ‚ùå No contact data found.\n\n"
            yield f"data: ___END___\n\n"
        return Response(error_stream(), mimetype='text/event-stream')
    
    def generate_and_send_emails():
        df = app_state["contacts_df"]
        total_contacts = len(df)
        yield f"data: üöÄ Starting Email Automation for {total_contacts} contacts...\n\n"
        time.sleep(1)

        for index, row in df.iterrows():
            try:
                personalized_prompt = prompt_template
                for header in app_state["headers"]:
                    regex = re.compile(re.escape(f'[{header}]'), re.IGNORECASE)
                    personalized_prompt = regex.sub(str(row[header]), personalized_prompt)
                
                email_address = row['email']
                yield f"data: ü§ñ ({index + 1}/{total_contacts}) Generating email for {email_address}...\n\n"
                
                # **NEW:** Smart Retry Logic for API calls
                response = None
                max_retries = 3
                for attempt in range(max_retries):
                    try:
                        response = model.generate_content(personalized_prompt)
                        break 
                    except Exception as e:
                        if "429" in str(e):
                            wait_time = 60
                            yield f"data: ‚ö†Ô∏è Rate limit hit. Waiting for {wait_time} seconds... (Attempt {attempt + 1}/{max_retries})\n\n"
                            time.sleep(wait_time)
                        else:
                            raise e
                
                if response is None:
                    yield f"data: ‚ùå Failed to generate email for {email_address} after multiple retries. Skipping.\n\n"
                    continue

                generated_email_body = response.text
                final_email_body = generated_email_body
                for header in app_state["headers"]:
                    regex = re.compile(re.escape(f'[{header}]'), re.IGNORECASE)
                    final_email_body = regex.sub(str(row[header]), final_email_body)

                yield f"data: --- Final Personalized Email for {email_address} ---\n\n"
                for line in final_email_body.split('\n'):
                    if line.strip():
                        yield f"data: {line.strip()}\n\n"
                yield f"data: --- End of Email ---\n\n"
                
                subject = f"A message for {row.get('client name', 'you')}"
                success, status = send_email(email_address, subject, final_email_body)
                
                if success:
                    yield f"data: ‚úÖ Successfully sent email to {email_address}.\n\n"
                else:
                    yield f"‚ùå Failed to send email. Reason: {status}\n\n"
                time.sleep(1)

            except Exception as e:
                yield f"data: ‚ùå Error processing row {index + 1}: {e}\n\n"
                time.sleep(0.5)

        yield f"data: ___END___\n\n"

    return Response(stream_with_context(generate_and_send_emails()), mimetype='text/event-stream')

if __name__ == '__main__':
    app.run(port=5002, debug=True)
