<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Email Automator Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
        .gradient-text { background: linear-gradient(to right, #4f46e5, #7c3aed); -webkit-background-clip: text; -webkit-text-fill-color: transparent; }
        .loader { border: 4px solid #e5e7eb; border-top: 4px solid #6366f1; border-radius: 50%; width: 24px; height: 24px; animation: spin 1s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .file-input-wrapper { position: relative; overflow: hidden; display: inline-block; cursor: pointer; }
        .file-input-wrapper input[type=file] { font-size: 100px; position: absolute; left: 0; top: 0; opacity: 0; cursor: pointer; }
        .file-input-button { background-color: #4f46e5; color: white; padding: 0.5rem 1rem; border-radius: 0.5rem; font-weight: 600; transition: background-color 0.2s; }
        .file-input-wrapper:hover .file-input-button { background-color: #4338ca; }
    </style>
</head>
<body class="text-gray-800">

    <div class="container mx-auto px-4 py-12 max-w-7xl">
        <header class="text-center mb-12">
            <h1 class="text-5xl md:text-6xl font-extrabold text-gray-900">AI <span class="gradient-text">Client Hunter</span> Dashboard</h1>
            <p class="mt-4 text-lg text-gray-600">Add leads via Chrome Extension, Google Sheets, or CSV Upload.</p>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Left Column: Leads Management -->
            <div class="lg:col-span-2 space-y-8">
                <!-- Leads Source Input -->
                <div class="bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">Load Leads in Bulk</h2>
                    <div class="space-y-4">
                        <div>
                            <label for="sheet-url" class="block text-sm font-medium text-gray-700 mb-1">Load from Google Sheet URL</label>
                            <input type="text" id="sheet-url" placeholder="https://docs.google.com/spreadsheets/d/..." class="w-full bg-gray-50 p-2 rounded-lg border">
                        </div>
                        <div class="text-center text-gray-500 font-semibold">OR</div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Load from CSV File</label>
                            <div class="flex items-center gap-4">
                                <div class="file-input-wrapper">
                                    <button class="file-input-button">Choose File</button>
                                    <input type="file" id="csv-file-input" accept=".csv">
                                </div>
                                <span id="file-name" class="text-gray-600">No file chosen</span>
                            </div>
                        </div>
                        <div class="pt-2">
                            <button id="load-leads-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-5 rounded-lg">Connect & Load Leads</button>
                            <p id="load-status" class="text-sm mt-2"></p>
                        </div>
                    </div>
                </div>

                <!-- Leads Table -->
                <div class="bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-2xl font-bold text-gray-800">Your Leads</h2>
                        <button id="refresh-leads-btn" class="bg-indigo-100 text-indigo-700 font-semibold py-2 px-4 rounded-lg hover:bg-indigo-200 transition">Refresh List</button>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Client Name</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Company</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Industry</th>
                                </tr>
                            </thead>
                            <tbody id="leads-table-body" class="bg-white divide-y divide-gray-200">
                                <tr><td colspan="4" class="text-center py-10 text-gray-500">No leads yet. Add some!</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Right Column: Automation Control -->
            <div class="space-y-8">
                <div class="bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">Write AI Prompt</h2>
                    <textarea id="ai-prompt" placeholder="Write a friendly email to [client name] from [company / website]..." class="w-full bg-gray-50 text-gray-800 p-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:outline-none" rows="8"></textarea>
                </div>
                <div class="bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">Start Automation</h2>
                    <button id="start-btn" class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-4 px-6 rounded-lg transition-all transform hover:scale-105 shadow-lg shadow-green-500/30 flex items-center justify-center gap-3 text-xl">
                        <svg class="w-7 h-7" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" /></svg>
                        Start Campaign
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Log Area -->
        <div id="log-area" class="bg-gray-800 text-white p-6 rounded-lg shadow-inner mt-8 hidden">
            <h3 class="font-semibold text-lg mb-2 flex items-center gap-2">
                <div id="log-loader" class="loader hidden"></div>
                <span id="log-title">Automation Log</span>
            </h3>
            <div id="log-console" class="h-64 overflow-y-auto text-sm font-mono bg-black/20 p-4 rounded-md"></div>
        </div>
    </div>

    <script>
        const API_URL = 'http://127.0.0.1:5002';

        // --- Element Refs ---
        const refreshLeadsBtn = document.getElementById('refresh-leads-btn');
        const leadsTableBody = document.getElementById('leads-table-body');
        const startBtn = document.getElementById('start-btn');
        const aiPrompt = document.getElementById('ai-prompt');
        const logArea = document.getElementById('log-area');
        const logConsole = document.getElementById('log-console');
        const logLoader = document.getElementById('log-loader');
        const logTitle = document.getElementById('log-title');
        const loadLeadsBtn = document.getElementById('load-leads-btn');
        const sheetUrlInput = document.getElementById('sheet-url');
        const csvFileInput = document.getElementById('csv-file-input');
        const fileNameSpan = document.getElementById('file-name');
        const loadStatus = document.getElementById('load-status');
        let selectedFile = null;

        // --- Functions ---
        async function fetchLeads() {
            try {
                const response = await fetch(`${API_URL}/api/get-leads`);
                if (!response.ok) throw new Error(`Server responded with status: ${response.status}`);
                const leads = await response.json();
                renderLeads(leads);
            } catch (error) {
                console.error('Failed to fetch leads:', error);
                leadsTableBody.innerHTML = `<tr><td colspan="4" class="text-center py-10 text-red-500">Failed to load leads. Is the server running?</td></tr>`;
            }
        }

        function renderLeads(leads) {
            if (!leads || leads.length === 0) {
                leadsTableBody.innerHTML = `<tr><td colspan="4" class="text-center py-10 text-gray-500">No leads yet. Add some!</td></tr>`;
                return;
            }
            leadsTableBody.innerHTML = leads.map(lead => `
                <tr>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${lead['client name'] || ''}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${lead['email'] || ''}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${lead['company / website'] || ''}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${lead['industry'] || ''}</td>
                </tr>
            `).join('');
        }

        function addLog(message) {
            const p = document.createElement('p');
            p.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
            logConsole.appendChild(p);
            logConsole.scrollTop = logConsole.scrollHeight;
        }

        // --- Event Listeners ---
        refreshLeadsBtn.addEventListener('click', fetchLeads);

        csvFileInput.addEventListener('change', (event) => {
            selectedFile = event.target.files[0];
            if (selectedFile) {
                fileNameSpan.textContent = selectedFile.name;
                sheetUrlInput.value = '';
            }
        });
        sheetUrlInput.addEventListener('input', () => {
            if (sheetUrlInput.value) {
                selectedFile = null;
                csvFileInput.value = '';
                fileNameSpan.textContent = 'No file chosen';
            }
        });

        loadLeadsBtn.addEventListener('click', async () => {
            loadStatus.textContent = 'Connecting...';
            loadStatus.style.color = 'blue';
            let response;
            try {
                if (selectedFile) {
                    const formData = new FormData();
                    formData.append('sheet', selectedFile);
                    response = await fetch(`${API_URL}/api/load-sheet`, { method: 'POST', body: formData });
                } else if (sheetUrlInput.value) {
                    response = await fetch(`${API_URL}/api/load-sheet`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ url: sheetUrlInput.value }),
                    });
                } else {
                    throw new Error('Please provide a URL or select a file.');
                }

                if (!response.ok) {
                    const errorResult = await response.json();
                    throw new Error(errorResult.error || 'Failed to load.');
                }
                const result = await response.json();
                loadStatus.textContent = `✅ ${result.message}`;
                loadStatus.style.color = 'green';
                fetchLeads(); // Refresh the table with all leads
            } catch (error) {
                loadStatus.textContent = `❌ Error: ${error.message}`;
                loadStatus.style.color = 'red';
            }
        });

        startBtn.addEventListener('click', () => {
            logArea.classList.remove('hidden');
            logConsole.innerHTML = '';
            logLoader.classList.remove('hidden');
            logTitle.innerText = 'Automation in Progress...';
            startBtn.disabled = true;

            const prompt = encodeURIComponent(aiPrompt.value);
            const eventSource = new EventSource(`${API_URL}/api/run-automation?prompt=${prompt}`);

            eventSource.onmessage = function(event) {
                const data = event.data;
                if (data === "___END___") {
                    addLog("✅ Automation Complete!");
                    logLoader.classList.add('hidden');
                    logTitle.innerText = 'Automation Log';
                    startBtn.disabled = false;
                    eventSource.close();
                } else {
                    addLog(data);
                }
            };

            eventSource.onerror = function(err) {
                console.error("EventSource failed:", err);
                addLog("❌ An error occurred with the real-time connection.");
                logLoader.classList.add('hidden');
                logTitle.innerText = 'Automation Log';
                startBtn.disabled = false;
                eventSource.close();
            };
        });

        // Fetch leads on initial load
        fetchLeads();
    </script>
</body>
</html>
